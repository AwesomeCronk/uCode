// This is the microcode from SiliconPython's MMU on 22-9-29, taken as an example of a microcode description.
// https://github.com/AwesomeCronk/SiliconPython
// THIS IS NO LONGER TRUE!! I CHANGED IT TO TEST NEW UPDATES!!

{
    numControls: 24,
    numConditions: 3,
    numStates: 8,
    numSteps: 8,

    controlLines: [
        'Available_In',
        'Available_Out',
        'Desired_In',
        'Desired_Out',
        'Remaining_Out',
        'First_In',
        'First_Out',
        'Previous_In',
        'Previous_Out',
        'Testing_In',
        'Testing_Out',
        'Split_Out',
        'Next_In',
        'Next_Out',
        'Memory_Address',
        'Memory_AddressOffset',
        'Memory_Read',
        'Memory_Write',
        'CPU_Enable',
        '',
        'State_Set',
        'State_2',
        'State_1',
        'State_0'
    ],

    conditionLines: [
        'Sufficient',
        'PreviousIsFirst',
        'Ctrl_Alloc'
    ],

    defaultStep: [],

    states:
    {
        blank: [],

        idle: [
            {
                'Ctrl_Alloc': ['/SetState:init'],
                '': ['CPU_Enable', 'State_Set']
            }
        ],

        init: [
            ['Desired_In'],
            ['First_Out', 'Next_In'],
            ['Testing_In'],
            ['/SetState:compare'],
        ],

        compare: [
            ['Testing_Out', 'Previous_In'],
            ['Next_Out', 'Testing_In'],
            ['Testing_Out', 'Memory_Address'],
            ['Memory_Read', 'Available_In'],
            {
                'Sufficient': ['/SetState:splitBlock'],
                '': ['/SetState:walk']
            }
        ],

        walk: [
            ['Testing_Out', 'Memory_AddressOffset'],
            ['Memory_Read', 'Next_In'],
            ['/SetState:compare']
        ],

        splitBlock: [
            ['Split_Out', 'Memory_Address'],
            ['Memory_Write', 'Remaining_Out'],
            ['Testing_Out', 'Memory_AddressOffset'],
            ['Memory_Read', 'Next_In'],
            ['Split_Out', 'Memory_AddressOffset'],
            ['Memory_Write', 'Next_Out'],
            {
                'PreviousIsFirst': ['/SetState:RelocateFirstBlock'],
                '': ['/SetState:redirectPreviousBlock']
            }
        ],

        redirectPreviousBlock: [
            ['Previous_Out', 'Memory_AddressOffset'],
            ['Memory_Read', 'Next_In'],
            ['/SetState:idle']
        ],

        relocateFirstBlock: [
            ['Testing_Out', 'Memory_AddressOffset'],
            ['Memory_Read', 'First_In'],
            ['/SetState:idle']
        ],
    },

    stateOrder: [
        'idle',
        'init',
        'compare',
        'walk',
        'splitBlock',
        'redirectPreviousBlock',
        'relocateFirstBlock',
        'blank'
    ]
}
