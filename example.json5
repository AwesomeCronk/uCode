// This is the microcode from SiliconPython's MMU on 22-9-29, taken as an example of a microcode description.
// https://github.com/AwesomeCronk/SiliconPython

{
    numLines: 24,
    numStates: 8,
    numSteps: 8,
    numConditions: 8,

    lines: [
        'Available_In',
        'Available_Out',
        'Desired_In',
        'Desired_Out',
        'Remaining_Out',
        'First_In',
        'First_Out',
        'Previous_In',
        'Previous_Out',
        'Testing_In',
        'Testing_Out',
        'Split_Out',
        'Next_In',
        'Next_Out',
        'Memory_Address',
        'Memory_AddressOffset',
        'Memory_Read',
        'Memory_Write',
        'CPU_Enable',
        '',
        'State_Set',
        'State_0',
        'State_1',
        'State_2'
    ],

    defaultStep: [],

    state_blank: [],

    state_idle: [
        [
            ['CPU_Enable', 'State_Set'],
            ['State_Set>>state_init'],
            ['CPU_Enable', 'State_Set'],
            ['State_Set>>state_init'],
            ['CPU_Enable', 'State_Set'],
            ['State_Set>>state_init'],
            ['CPU_Enable', 'State_Set'],
            ['State_Set>>state_init']
        ]
    ],

    state_init: [
        ['Desired_In'],
        ['First_Out', 'Next_In'],
        ['Testing_In'],
        ['State_Set>>state_compare'],
    ],

    state_compare: [
        ['Testing_Out', 'Previous_In'],
        ['Next_Out', 'Testing_In'],
        ['Testing_Out', 'Memory_Address'],
        ['Memory_Read', 'Available_In'],
        [
            ['State_Set>>state_walk'],
            ['State_Set>>state_walk'],
            ['State_Set>>state_walk'],
            ['State_Set>>state_walk'],
            ['State_Set>>state_splitBlock'],
            ['State_Set>>state_splitBlock'],
            ['State_Set>>state_splitBlock'],
            ['State_Set>>state_splitBlock']
        ]
    ],

    state_walk: [
        ['Testing_Out', 'Memory_AddressOffset'],
        ['Memory_Read', 'Next_In'],
        ['State_Set>>state_compare']
    ],

    state_splitBlock: [
        ['Split_Out', 'Memory_Address'],
        ['Memory_Write', 'Remaining_Out'],
        ['Testing_Out', 'Memory_AddressOffset'],
        ['Memory_Read', 'Next_In'],
        ['Split_Out', 'Memory_AddressOffset'],
        ['Memory_Write', 'Next_Out'],
        [
            ['State_Set>>state_redirectPreviousBlock'],
            ['State_Set>>state_redirectPreviousBlock'],
            ['State_Set>>state_relocateFirstBlock'],
            ['State_Set>>state_relocateFirstBlock'],
            ['State_Set>>state_redirectPreviousBlock'],
            ['State_Set>>state_redirectPreviousBlock'],
            ['State_Set>>state_relocateFirstBlock'],
            ['State_Set>>state_relocateFirstBlock']
        ]
    ],

    state_redirectPreviousBlock: [
        ['Previous_Out', 'Memory_AddressOffset'],
        ['Memory_Read', 'Next_In'],
        ['State_Set>>state_idle']
    ],

    state_relocateFirstBlock: [
        ['Testing_Out', 'Memory_AddressOffset'],
        ['Memory_Read', 'First_In'],
        ['State_Set>>state_idle']
    ],


    states: [
        'state_idle',
        'state_init',
        'state_compare',
        'state_walk',
        'state_splitBlock',
        'state_redirectPreviousBlock',
        'state_relocateFirstBlock',
        'state_blank'
    ]
}
